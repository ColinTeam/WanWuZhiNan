import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    id("kotlin-parcelize")
}

apply from: "../manifestFixer.gradle"
//apply(from = rootProject.file("manifestFixer.gradle"))

static String releaseTime() {
    def formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmm")
    return formatter.format(LocalDateTime.now())
}

android {
    namespace = "com.wanwuzhinan.mingchang"
    compileSdk = libs.versions.compileSdk.get().toInteger()
    flavorDimensions += ["rank"]
    defaultConfig {
        applicationId = "com.wanwuzhinan.mingchang"
        minSdk = libs.versions.minSdk.get().toInteger()
        versionCode = libs.versions.versionCode.get().toLong()
        versionName = libs.versions.versionName.get()
        multiDexEnabled = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"
        }
    }


    signingConfigs {
        release {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            storeFile file(properties.getProperty("keystore.path"))
            storePassword properties.getProperty("keystore.password")
            keyAlias = properties.getProperty("keystore.alias")
            keyPassword properties.getProperty("keystore.alias_password")
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled = false
            shrinkResources = false
            signingConfig = signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled = false
            shrinkResources = false
            signingConfig = signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        rank_yes {
            dimension "rank"
            buildConfigField("Boolean", "DISPLAY_RANK", "true")
        }
        rank_no {
            dimension "rank"
            buildConfigField("Boolean", "DISPLAY_RANK", "false")
        }
    }
    //自定义打包输出文件名
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            def flavorName = variant.flavorName
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if (variant.buildType.name == 'release') {
                    fileName = "wwzn_${defaultConfig.versionName}_${releaseTime()}_release_${flavorName}.apk"
                } else if (variant.buildType.name == 'debug') {
                    fileName = "wwzn_${defaultConfig.versionName}_${releaseTime()}_debug_${flavorName}.apk"
                }
                // 打印输出路径和文件名
                def outputDir = outputFile.parentFile.absolutePath
                println "Variant:${variant.buildType.name} apk:$outputDir/$fileName"
                output.outputFileName = fileName
            }
        }
    }

    sourceSets {
        getByName("main") {
            jniLibs.srcDirs("libs")
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }
    dataBinding {
        //noinspection DataBindingWithoutKapt
        enabled = true
    }
}

dependencies {

    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation(project(":Utils"))
    implementation(project(":Network"))
    implementation(project(":Widgets"))
    implementation(project(":ImageLoader"))
    implementation(project(":comm"))
    implementation(project(":superplayerkit"))
    implementation(libs.bundles.androidCommon)
    implementation(libs.bundles.androidNavigation)
    implementation(libs.bundles.androidWidgets)
    implementation(libs.bundles.lifecycle)
    //网络请求
    implementation(libs.bundles.squareup)
    //图片加载
    implementation(libs.glide)
    implementation(libs.mmkv)
    implementation(libs.tbssdk)

    //https://github.com/LetMeOff/SimpleDownload 携程下载文件
    implementation libs.simpledownload
    implementation libs.disklrucache
    //二维码
    implementation libs.zxing//扫一扫
    //PhotoView
    implementation libs.photoview
    //图文详情的textview
    implementation libs.html.textview
    implementation libs.baserecyclerviewadapterhelper

    //阴影
    implementation libs.lcardview.kt
    implementation libs.androidx.legacy.support.core.ui

    implementation libs.svgaplayer.android

    implementation libs.androidx.lifecycle.runtime.ktx
    //视频播放
    implementation libs.liteavsdk.player.premium
    implementation libs.gsyvideoplayer
    implementation libs.shapeview
    implementation libs.media.exoplayer.hls
    implementation libs.media.exoplayer
    implementation libs.media.session
    implementation libs.media.ui

}